
pwm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000898  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000408  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000139  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000354  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006c  00000000  00000000  000012bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
	DDRD=255;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
	int a=0;
	//PORTB=(1<<PB3);
	TCCR1A=(1<<COM1A1)|(1<<WGM10);
  96:	81 e8       	ldi	r24, 0x81	; 129
  98:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<CS10)|(1<<WGM12);
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	89 60       	ori	r24, 0x09	; 9
  9e:	8e bd       	out	0x2e, r24	; 46
	   while(1)
    {
		for(a=0;a<255;a++)
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	ef ef       	ldi	r30, 0xFF	; 255
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	0b c0       	rjmp	.+22     	; 0xc2 <main+0x30>
		{
			OCR0=a;
  ac:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	50 e7       	ldi	r21, 0x70	; 112
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2c>
  be:	00 00       	nop
	//PORTB=(1<<PB3);
	TCCR1A=(1<<COM1A1)|(1<<WGM10);
	TCCR1B|=(1<<CS10)|(1<<WGM12);
	   while(1)
    {
		for(a=0;a<255;a++)
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	91 05       	cpc	r25, r1
  c6:	94 f3       	brlt	.-28     	; 0xac <main+0x1a>
  c8:	8e 2f       	mov	r24, r30
			OCR0=a;
			_delay_ms(50);
		}
		for(a=255;a>0;a--)
		{
			OCR0=a;
  ca:	8c bf       	out	0x3c, r24	; 60
  cc:	4f ef       	ldi	r20, 0xFF	; 255
  ce:	50 e7       	ldi	r21, 0x70	; 112
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	41 50       	subi	r20, 0x01	; 1
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	60 40       	sbci	r22, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x40>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x4a>
  dc:	00 00       	nop
  de:	81 50       	subi	r24, 0x01	; 1
		for(a=0;a<255;a++)
		{
			OCR0=a;
			_delay_ms(50);
		}
		for(a=255;a>0;a--)
  e0:	a1 f7       	brne	.-24     	; 0xca <main+0x38>
	//PORTB=(1<<PB3);
	TCCR1A=(1<<COM1A1)|(1<<WGM10);
	TCCR1B|=(1<<CS10)|(1<<WGM12);
	   while(1)
    {
		for(a=0;a<255;a++)
  e2:	c9 01       	movw	r24, r18
  e4:	ee cf       	rjmp	.-36     	; 0xc2 <main+0x30>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
