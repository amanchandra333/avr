
timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000333  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000097  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028f  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a4  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000036  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#define F_CPU 16000000UL
int main()
{
	long int counter=0;
	TCCR1A=0; 
  92:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11)|(1<<CS10);
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0; //initial condition
  98:	1d bc       	out	0x2d, r1	; 45
  9a:	1c bc       	out	0x2c, r1	; 44
	DDRB=65535;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	87 bb       	out	0x17, r24	; 23
#include <avr/io.h>
#define F_CPU 16000000UL
int main()
{
	long int counter=0;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	dc 01       	movw	r26, r24
			while(TCNT1<65400);
				counter++;
				TCNT1=0;
		}
		PORTB ^= 255; 
		counter = 0; 
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	ba 01       	movw	r22, r20
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <main+0x32>
	TCNT1=0; //initial condition
	DDRB=65535;
	while(1){
		while(counter<4)
		{
			while(TCNT1<65400);
  ae:	2c b5       	in	r18, 0x2c	; 44
  b0:	3d b5       	in	r19, 0x2d	; 45
  b2:	ef ef       	ldi	r30, 0xFF	; 255
  b4:	28 37       	cpi	r18, 0x78	; 120
  b6:	3e 07       	cpc	r19, r30
  b8:	d0 f3       	brcs	.-12     	; 0xae <main+0x1c>
				counter++;
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	a1 1d       	adc	r26, r1
  be:	b1 1d       	adc	r27, r1
				TCNT1=0;
  c0:	1d bc       	out	0x2d, r1	; 45
  c2:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0; 
	TCCR1B=(1<<CS11)|(1<<CS10);
	TCNT1=0; //initial condition
	DDRB=65535;
	while(1){
		while(counter<4)
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	91 05       	cpc	r25, r1
  c8:	a1 05       	cpc	r26, r1
  ca:	b1 05       	cpc	r27, r1
  cc:	84 f3       	brlt	.-32     	; 0xae <main+0x1c>
		{
			while(TCNT1<65400);
				counter++;
				TCNT1=0;
		}
		PORTB ^= 255; 
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 95       	com	r24
  d2:	88 bb       	out	0x18, r24	; 24
		counter = 0; 
  d4:	db 01       	movw	r26, r22
  d6:	ca 01       	movw	r24, r20
		//_delay_ms(1000);
	}				
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <main+0x32>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
