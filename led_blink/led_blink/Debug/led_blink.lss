
led_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000057d  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000118  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c0  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f8  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB=255;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
    while(1)  //or while(1>0)  infinite loop
    {
		PORTB=(1<<PB7);
  96:	70 e8       	ldi	r23, 0x80	; 128
		_delay_ms(100); 
		PORTB=(1<<PB6);
  98:	60 e4       	ldi	r22, 0x40	; 64
		_delay_ms(100);
		PORTB=(1<<PB5);
  9a:	50 e2       	ldi	r21, 0x20	; 32
		_delay_ms(100);
		PORTB=(1<<PB4);
  9c:	40 e1       	ldi	r20, 0x10	; 16
		_delay_ms(100);
		PORTB=(1<<PB3);
  9e:	38 e0       	ldi	r19, 0x08	; 8
		_delay_ms(100);
		PORTB=(1<<PB2);
  a0:	24 e0       	ldi	r18, 0x04	; 4
		_delay_ms(100);
		PORTB=(1<<PB1);
  a2:	e2 e0       	ldi	r30, 0x02	; 2
		_delay_ms(100);
		PORTB=(1<<PB0);
  a4:	f1 e0       	ldi	r31, 0x01	; 1
int main(void)
{
	DDRB=255;
    while(1)  //or while(1>0)  infinite loop
    {
		PORTB=(1<<PB7);
  a6:	78 bb       	out	0x18, r23	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	91 ee       	ldi	r25, 0xE1	; 225
  ac:	a4 e0       	ldi	r26, 0x04	; 4
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x26>
  b8:	00 00       	nop
		_delay_ms(100); 
		PORTB=(1<<PB6);
  ba:	68 bb       	out	0x18, r22	; 24
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	91 ee       	ldi	r25, 0xE1	; 225
  c0:	a4 e0       	ldi	r26, 0x04	; 4
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x30>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3a>
  cc:	00 00       	nop
		_delay_ms(100);
		PORTB=(1<<PB5);
  ce:	58 bb       	out	0x18, r21	; 24
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	91 ee       	ldi	r25, 0xE1	; 225
  d4:	a4 e0       	ldi	r26, 0x04	; 4
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	a0 40       	sbci	r26, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4e>
  e0:	00 00       	nop
		_delay_ms(100);
		PORTB=(1<<PB4);
  e2:	48 bb       	out	0x18, r20	; 24
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	91 ee       	ldi	r25, 0xE1	; 225
  e8:	a4 e0       	ldi	r26, 0x04	; 4
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x58>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x62>
  f4:	00 00       	nop
		_delay_ms(100);
		PORTB=(1<<PB3);
  f6:	38 bb       	out	0x18, r19	; 24
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	91 ee       	ldi	r25, 0xE1	; 225
  fc:	a4 e0       	ldi	r26, 0x04	; 4
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	a0 40       	sbci	r26, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x6c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x76>
 108:	00 00       	nop
		_delay_ms(100);
		PORTB=(1<<PB2);
 10a:	28 bb       	out	0x18, r18	; 24
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	91 ee       	ldi	r25, 0xE1	; 225
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	81 50       	subi	r24, 0x01	; 1
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	a0 40       	sbci	r26, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x80>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x8a>
 11c:	00 00       	nop
		_delay_ms(100);
		PORTB=(1<<PB1);
 11e:	e8 bb       	out	0x18, r30	; 24
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	91 ee       	ldi	r25, 0xE1	; 225
 124:	a4 e0       	ldi	r26, 0x04	; 4
 126:	81 50       	subi	r24, 0x01	; 1
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	a0 40       	sbci	r26, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x94>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x9e>
 130:	00 00       	nop
		_delay_ms(100);
		PORTB=(1<<PB0);
 132:	f8 bb       	out	0x18, r31	; 24
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	91 ee       	ldi	r25, 0xE1	; 225
 138:	a4 e0       	ldi	r26, 0x04	; 4
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	a0 40       	sbci	r26, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xa8>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xb2>
 144:	00 00       	nop
 146:	af cf       	rjmp	.-162    	; 0xa6 <main+0x14>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
