
interrupt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001a0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000352  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c8  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000b2  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
volatile long counter=0;

int main(void)
{	sei();//to enable global interrupt
  92:	78 94       	sei
	DDRB=255;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	PORTB=0;
  98:	18 ba       	out	0x18, r1	; 24
	TCNT0=0;
  9a:	12 be       	out	0x32, r1	; 50
	TCCR0|=(1<<CS00);
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);         
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 bf       	out	0x39, r24	; 57
   while(1){
	  		 if (counter>=62000)
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	90 91 61 00 	lds	r25, 0x0061
  ae:	a0 91 62 00 	lds	r26, 0x0062
  b2:	b0 91 63 00 	lds	r27, 0x0063
  b6:	80 33       	cpi	r24, 0x30	; 48
  b8:	22 ef       	ldi	r18, 0xF2	; 242
  ba:	92 07       	cpc	r25, r18
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	a2 07       	cpc	r26, r18
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	b2 07       	cpc	r27, r18
  c4:	84 f3       	brlt	.-32     	; 0xa6 <main+0x14>
	  		 {
		  		 PORTB^=255;
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	80 95       	com	r24
  ca:	88 bb       	out	0x18, r24	; 24
		  		 counter=0;
  cc:	10 92 60 00 	sts	0x0060, r1
  d0:	10 92 61 00 	sts	0x0061, r1
  d4:	10 92 62 00 	sts	0x0062, r1
  d8:	10 92 63 00 	sts	0x0063, r1
  dc:	e4 cf       	rjmp	.-56     	; 0xa6 <main+0x14>

000000de <__vector_9>:
	  		 }   
   }	
	}	
ISR(TIMER0_OVF_vect)
	 {
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
		//f(counter<=975)
			counter++;
  f0:	80 91 60 00 	lds	r24, 0x0060
  f4:	90 91 61 00 	lds	r25, 0x0061
  f8:	a0 91 62 00 	lds	r26, 0x0062
  fc:	b0 91 63 00 	lds	r27, 0x0063
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	a1 1d       	adc	r26, r1
 104:	b1 1d       	adc	r27, r1
 106:	80 93 60 00 	sts	0x0060, r24
 10a:	90 93 61 00 	sts	0x0061, r25
 10e:	a0 93 62 00 	sts	0x0062, r26
 112:	b0 93 63 00 	sts	0x0063, r27
	 }
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
